{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Module 1: Introduction to Neural Nets "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The aim of this module is to introduce you to designing simple neural networks. You've already seen how to load data in PyTorch and a sample script of the overall workflow. In this notebook, you'll implement your own neural network and report on it's performance. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Gathering data "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll use the dataloading module we developed earlier. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import sys, os \n",
    "import pickle \n",
    "import torch \n",
    "import torch.utils.data as data \n",
    "import glob\n",
    "from PIL import Image\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "def unpickle(fname):\n",
    "    with open(fname, 'rb') as f:\n",
    "        Dict = pickle.load(f, encoding='bytes')\n",
    "    return Dict\n",
    "\n",
    "def load_data(batch):\n",
    "    print (\"Loading batch:{}\".format(batch))\n",
    "    return unpickle(batch)\n",
    "\n",
    "\n",
    "class CIFARLoader(data.Dataset):\n",
    "    \"\"\"\n",
    "    CIFAR-10 Loader: Loads the CIFAR-10 data according to an index value \n",
    "    and returns the data and the labels. \n",
    "    \n",
    "    args:\n",
    "    root: Root of the data directory.\n",
    "    \n",
    "    Optional args:\n",
    "    transforms: The transforms you wish to apply to the data.\n",
    "    target_transforms: The transforms you wish to apply to the labels.\n",
    "    \n",
    "    \"\"\"\n",
    "    def __init__(self, root, train=True, transform=None, target_transform=None):\n",
    "        self.root = root \n",
    "        self.transform = transform \n",
    "        self.target_transform = target_transform\n",
    "        self.train = train\n",
    "        patt = os.path.join(self.root, 'data_batch_*') # create the pattern we want to search for.\n",
    "        self.batches = sorted(glob.glob(patt))\n",
    "        self.train_data = []\n",
    "        self.train_labels = []\n",
    "        self.test_data = []\n",
    "        self.test_labels = []\n",
    "        \n",
    "        if self.train:\n",
    "            for batch in self.batches:\n",
    "                entry = {} \n",
    "                entry = load_data(batch)\n",
    "                self.train_data.append(entry[b'data'])\n",
    "                self.train_labels += entry[b'labels']\n",
    "        else:\n",
    "            entry = load_data(os.path.join(self.root, 'test_batch'))\n",
    "            self.test_data.append(entry[b'data'])\n",
    "            self.test_labels += entry[b'labels']\n",
    "        #############################################\n",
    "        # We need to \"concatenate\" all the different #\n",
    "        # training samples into one big array. For   #\n",
    "        # doing that we're going to use a numpy      # \n",
    "        # function called \"concatenate\".             # \n",
    "        ##############################################\n",
    "        if self.train:\n",
    "            self.train_data = np.concatenate(self.train_data) \n",
    "            self.train_data = self.train_data.reshape((50000, 3, 32,32))\n",
    "            self.train_data = self.train_data.transpose((0,2,3,1)) # pay attention to this step!\n",
    "        else: \n",
    "            self.test_data = np.concatenate(self.test_data)\n",
    "            self.test_data = self.test_data.reshape((10000, 3,32,32))\n",
    "            self.test_data = self.test_data.transpose((0,2,3,1))\n",
    "        \n",
    "        \n",
    "    \n",
    "    def __getitem__(self, index):\n",
    "        \n",
    "        if self.train:\n",
    "            image = self.train_data[index]\n",
    "            label = self.train_labels[index]\n",
    "        else:\n",
    "            image = self.test_data[index]\n",
    "            label = self.test_labels[index]\n",
    "        \n",
    "        if self.transform is not None:\n",
    "            image = self.transform(image)\n",
    "        if self.target_transform is not None:\n",
    "            label = self.target_transform(label)\n",
    "#         print(image.size())\n",
    "        return image, label\n",
    "    \n",
    "    def __len__(self):\n",
    "        if self.train:\n",
    "            return len(self.train_data)\n",
    "        else:\n",
    "            return len(self.test_data)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Given the dataset, let's test our dataset by seeing some of the images and their corresponding labels. PyTorch provides us with a neat little function called make_grid which plots \"x\" number of images together in a grid. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading batch:/home/akulshr/cifar-10-batches-py/data_batch_1\n",
      "Loading batch:/home/akulshr/cifar-10-batches-py/data_batch_2\n",
      "Loading batch:/home/akulshr/cifar-10-batches-py/data_batch_3\n",
      "Loading batch:/home/akulshr/cifar-10-batches-py/data_batch_4\n",
      "Loading batch:/home/akulshr/cifar-10-batches-py/data_batch_5\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7effc1a45dd8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'plane bird horse ship'"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import torchvision.transforms as transforms\n",
    "import torch.utils.data as data\n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt\n",
    "import torchvision\n",
    "\n",
    "def imshow(torch_tensor):\n",
    "    torch_tensor = torch_tensor/2 + 0.5\n",
    "    npimg = torch_tensor.numpy()\n",
    "    plt.imshow(npimg.transpose(1,2,0))\n",
    "    plt.show()\n",
    "\n",
    "    \n",
    "\n",
    "tfs  = transforms.Compose([transforms.ToTensor(),\n",
    "                          transforms.Normalize((0.5,0.5,0.5), (0.5,0.5,0.5))])\n",
    "\n",
    "root='/home/akulshr/cifar-10-batches-py/'\n",
    "\n",
    "cifar_train = CIFARLoader(root, train=True, transform=tfs) # create a \"CIFARLoader instance\".\n",
    "cifar_loader = data.DataLoader(cifar_train, batch_size=4, shuffle=True, num_workers=2)\n",
    "\n",
    "# all possible classes in the CIFAR-10 dataset\n",
    "classes = ('plane', 'car', 'bird', 'cat',\n",
    "           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')\n",
    "\n",
    "data_iter = iter(cifar_loader)\n",
    "data,label = data_iter.next()\n",
    "\n",
    "#visualize data.\n",
    "imshow(torchvision.utils.make_grid(data))\n",
    "\n",
    "# print the labels\n",
    "' '.join(classes[label[j]] for j in range(4))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating a Neural Network "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we're through with the boring part, let's move on to the fun stuff! In the code stub being provided you can write your own network definition and then print it. We've not covered Convolutional Layers yet, so the fun will be limited to just using Linear Layers. When using linear layers keep in mind that the input features are `3*32*32`.  When writing out the layers it is important to think in terms of matrix multiplication. So if your input features are of dimension `4x3x32x32` then your input features must be the same dimensions. I'll define some terms so that you can use them while designing the net: \n",
    "\n",
    "\n",
    "- N: The batch size --> This determines how many images are pushed through the network during an iteration. \n",
    "- C: The number of channels --> It's an RGB image hence we set this to 3. \n",
    "- H,W: The height and width of the image. \n",
    "\n",
    "Your input to a network is usually `NxCxHxW`. Now a linear layer expects a single number as an input feature, so for a batch size of 1 your input features will be `3072(3*32*32)`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import torch.nn as nn \n",
    "\n",
    "class MyNet(nn.Module):\n",
    "    \"\"\"\n",
    "    Your neural network here. \n",
    "    bs: Batch size, you can include\n",
    "    or leave it out.\n",
    "    \"\"\"\n",
    "    def __init__(self, bs):\n",
    "        super(MyNet, self).__init__()\n",
    "        pass\n",
    "    \n",
    "    def forward(self, x):\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MyNet (\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "net = MyNet(4) # be sure to put any additional parameters you pass to __init__ here \n",
    "print(net)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training the Network "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Having defined our network and tested that our dataloader works to our satisfaction, we're going to train the network. For your convenience, the training script is included and it is highly recommended that you try to gain a sense of what's happening. We'll talk more about training in the coming meetings. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading batch:/home/akulshr/cifar-10-batches-py/data_batch_1\n",
      "Loading batch:/home/akulshr/cifar-10-batches-py/data_batch_2\n",
      "Loading batch:/home/akulshr/cifar-10-batches-py/data_batch_3\n",
      "Loading batch:/home/akulshr/cifar-10-batches-py/data_batch_4\n",
      "Loading batch:/home/akulshr/cifar-10-batches-py/data_batch_5\n"
     ]
    }
   ],
   "source": [
    "import torch.optim as optim \n",
    "import torch.utils.data as data \n",
    "from torch.autograd import Variable \n",
    "\n",
    "tfs  = transforms.Compose([transforms.ToTensor(),\n",
    "                          transforms.Normalize((0.5,0.5,0.5), (0.5,0.5,0.5))])\n",
    "\n",
    "root='/home/akulshr/cifar-10-batches-py/'\n",
    "\n",
    "cifar_train = CIFARLoader(root, transform=tfs) # create a \"CIFARLoader instance\".\n",
    "cifar_train_loader = data.DataLoader(cifar_train, batch_size=4, shuffle=True, num_workers=2)\n",
    "\n",
    "lossfn = nn.NLLLoss()\n",
    "optimz = optim.SGD(net.parameters(), lr=1e-3, momentum=0.9)\n",
    "\n",
    "def train(net):\n",
    "    net.train()\n",
    "    for ep in range(2):\n",
    "        running_loss = 0.0\n",
    "        for ix, (img,label) in enumerate(cifar_train_loader, 0):\n",
    "            img_var = Variable(img)\n",
    "            label_var = Variable(label)\n",
    "            optimz.zero_grad()\n",
    "#             print(img_var.size())\n",
    "            op = net(img_var)\n",
    "            loss = lossfn(op, label_var)\n",
    "            loss.backward()\n",
    "            optimz.step()\n",
    "            \n",
    "            running_loss += loss.data[0]\n",
    "            if ix%2000 == 1999:\n",
    "                print(\"[%d/%5d] Loss: %f\"%(ep+1, ix+1, running_loss/2000))\n",
    "                running_loss = 0.0\n",
    "    print(\"Finished Training\\n\")\n",
    "                \n",
    "            \n",
    "            \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1/ 2000] Loss: 1.919267\n",
      "[1/ 4000] Loss: 1.846389\n",
      "[1/ 6000] Loss: 1.832226\n",
      "[1/ 8000] Loss: 1.796609\n",
      "[1/10000] Loss: 1.804408\n",
      "[1/12000] Loss: 1.790879\n",
      "[2/ 2000] Loss: 1.776006\n",
      "[2/ 4000] Loss: 1.771522\n",
      "[2/ 6000] Loss: 1.769797\n",
      "[2/ 8000] Loss: 1.774239\n",
      "[2/10000] Loss: 1.789092\n",
      "[2/12000] Loss: 1.765049\n",
      "Finished Training\n",
      "\n"
     ]
    }
   ],
   "source": [
    "train(net)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So far we've trained the network and we're seeing some output loss. However, that's only the part of the story, since we need the model to perform well on *unseen* inputs. In order to do that we'll evaluate the dataset on the test_batch. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading batch:/home/akulshr/cifar-10-batches-py/test_batch\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n+P/jyitvLuJHGwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7effcabd0908>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ground Truth: \n",
      "cat ship ship plane\n"
     ]
    }
   ],
   "source": [
    "\n",
    "def imshow(torch_tensor):\n",
    "    torch_tensor = torch_tensor/2 + 0.5\n",
    "    npimg = torch_tensor.numpy()\n",
    "    plt.imshow(npimg.transpose(1,2,0))\n",
    "    plt.show()\n",
    "\n",
    "    \n",
    "tfs  = transforms.Compose([transforms.ToTensor(),\n",
    "                          transforms.Normalize((0.5,0.5,0.5), (0.5,0.5,0.5))])\n",
    "\n",
    "root='/home/akulshr/cifar-10-batches-py/'\n",
    "\n",
    "cifar_test = CIFARLoader(root, train=False, transform=tfs)\n",
    "cifar_test_loader = data.DataLoader(cifar_test,batch_size=4, shuffle=False, num_workers=2)\n",
    "\n",
    "# all possible classes in the CIFAR-10 dataset\n",
    "classes = ('plane', 'car', 'bird', 'cat',\n",
    "           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')\n",
    "\n",
    "data_iter = iter(cifar_test_loader)\n",
    "imgs,label = data_iter.next()\n",
    "\n",
    "# Show the test images.\n",
    "imshow(torchvision.utils.make_grid(imgs))\n",
    "\n",
    "# Print the \"Ground Truth labels\" \n",
    "print(\"Ground Truth: \")\n",
    "print(' '.join(classes[label[j]] for j in range(4)))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So we've got these images along with their labels as \"ground truth\". Now let's ask the neural network we just trained as to what it thinks the images are"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Guessed class: \n",
      "cat truck ship ship\n"
     ]
    }
   ],
   "source": [
    "\n",
    "data_iter = iter(cifar_test_loader)\n",
    "imgs,label = data_iter.next()\n",
    "op = net(Variable(imgs))\n",
    "_, pred = torch.max(op.data, 1)\n",
    "print(\"Guessed class: \")\n",
    "print(' '.join(classes[pred[j]] for j in range(4)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pretty sweet! our neural network seems to have learnt something. Let's see how it does on the overall dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 37.950000\n"
     ]
    }
   ],
   "source": [
    "correct = 0.0\n",
    "total = 0.0\n",
    "for cache in cifar_test_loader:\n",
    "    img, label = cache \n",
    "    op = net(Variable(img))\n",
    "    _, pred = torch.max(op.data, 1)\n",
    "    total += label.size(0)\n",
    "    correct += (pred==label).sum()\n",
    "\n",
    "\n",
    "print(\"accuracy: %f\"%(100*(correct/total)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Try out different combinations of neural network layers (limited to Linear, Softmax for now) and report on how the accuracy changes. Happy deep learning!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ak",
   "language": "python",
   "name": "ak"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
